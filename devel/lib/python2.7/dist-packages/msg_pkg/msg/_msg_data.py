# This Python file uses the following encoding: utf-8
"""autogenerated by genpy from msg_pkg/msg_data.msg. Do not edit."""
import codecs
import sys
python3 = True if sys.hexversion > 0x03000000 else False
import genpy
import struct


class msg_data(genpy.Message):
  _md5sum = "502f6070fe0715f8193e5e6e22265227"
  _type = "msg_pkg/msg_data"
  _has_header = False  # flag to mark the presence of a Header object
  _full_text = """int32 data
int32 x
int32 y
float32 z

uint32 x_pos
uint32 y_pos
uint32 z_pos

uint32 x_ik_pos
uint32 y_ik_pos
uint32 z_ik_pos

int32 z_depth

bool pos_flag
bool depth_flag

float64 f64_linear_x
float64 f64_linear_y
float64 f64_linear_z

float64 f64_angular_x
float64 f64_angular_y
float64 f64_angular_z
"""
  __slots__ = ['data','x','y','z','x_pos','y_pos','z_pos','x_ik_pos','y_ik_pos','z_ik_pos','z_depth','pos_flag','depth_flag','f64_linear_x','f64_linear_y','f64_linear_z','f64_angular_x','f64_angular_y','f64_angular_z']
  _slot_types = ['int32','int32','int32','float32','uint32','uint32','uint32','uint32','uint32','uint32','int32','bool','bool','float64','float64','float64','float64','float64','float64']

  def __init__(self, *args, **kwds):
    """
    Constructor. Any message fields that are implicitly/explicitly
    set to None will be assigned a default value. The recommend
    use is keyword arguments as this is more robust to future message
    changes.  You cannot mix in-order arguments and keyword arguments.

    The available fields are:
       data,x,y,z,x_pos,y_pos,z_pos,x_ik_pos,y_ik_pos,z_ik_pos,z_depth,pos_flag,depth_flag,f64_linear_x,f64_linear_y,f64_linear_z,f64_angular_x,f64_angular_y,f64_angular_z

    :param args: complete set of field values, in .msg order
    :param kwds: use keyword arguments corresponding to message field names
    to set specific fields.
    """
    if args or kwds:
      super(msg_data, self).__init__(*args, **kwds)
      # message fields cannot be None, assign default values for those that are
      if self.data is None:
        self.data = 0
      if self.x is None:
        self.x = 0
      if self.y is None:
        self.y = 0
      if self.z is None:
        self.z = 0.
      if self.x_pos is None:
        self.x_pos = 0
      if self.y_pos is None:
        self.y_pos = 0
      if self.z_pos is None:
        self.z_pos = 0
      if self.x_ik_pos is None:
        self.x_ik_pos = 0
      if self.y_ik_pos is None:
        self.y_ik_pos = 0
      if self.z_ik_pos is None:
        self.z_ik_pos = 0
      if self.z_depth is None:
        self.z_depth = 0
      if self.pos_flag is None:
        self.pos_flag = False
      if self.depth_flag is None:
        self.depth_flag = False
      if self.f64_linear_x is None:
        self.f64_linear_x = 0.
      if self.f64_linear_y is None:
        self.f64_linear_y = 0.
      if self.f64_linear_z is None:
        self.f64_linear_z = 0.
      if self.f64_angular_x is None:
        self.f64_angular_x = 0.
      if self.f64_angular_y is None:
        self.f64_angular_y = 0.
      if self.f64_angular_z is None:
        self.f64_angular_z = 0.
    else:
      self.data = 0
      self.x = 0
      self.y = 0
      self.z = 0.
      self.x_pos = 0
      self.y_pos = 0
      self.z_pos = 0
      self.x_ik_pos = 0
      self.y_ik_pos = 0
      self.z_ik_pos = 0
      self.z_depth = 0
      self.pos_flag = False
      self.depth_flag = False
      self.f64_linear_x = 0.
      self.f64_linear_y = 0.
      self.f64_linear_z = 0.
      self.f64_angular_x = 0.
      self.f64_angular_y = 0.
      self.f64_angular_z = 0.

  def _get_types(self):
    """
    internal API method
    """
    return self._slot_types

  def serialize(self, buff):
    """
    serialize message into buffer
    :param buff: buffer, ``StringIO``
    """
    try:
      _x = self
      buff.write(_get_struct_3if6Ii2B6d().pack(_x.data, _x.x, _x.y, _x.z, _x.x_pos, _x.y_pos, _x.z_pos, _x.x_ik_pos, _x.y_ik_pos, _x.z_ik_pos, _x.z_depth, _x.pos_flag, _x.depth_flag, _x.f64_linear_x, _x.f64_linear_y, _x.f64_linear_z, _x.f64_angular_x, _x.f64_angular_y, _x.f64_angular_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize(self, str):
    """
    unpack serialized message in str into this message instance
    :param str: byte array of serialized message, ``str``
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 94
      (_x.data, _x.x, _x.y, _x.z, _x.x_pos, _x.y_pos, _x.z_pos, _x.x_ik_pos, _x.y_ik_pos, _x.z_ik_pos, _x.z_depth, _x.pos_flag, _x.depth_flag, _x.f64_linear_x, _x.f64_linear_y, _x.f64_linear_z, _x.f64_angular_x, _x.f64_angular_y, _x.f64_angular_z,) = _get_struct_3if6Ii2B6d().unpack(str[start:end])
      self.pos_flag = bool(self.pos_flag)
      self.depth_flag = bool(self.depth_flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill


  def serialize_numpy(self, buff, numpy):
    """
    serialize message with numpy array types into buffer
    :param buff: buffer, ``StringIO``
    :param numpy: numpy python module
    """
    try:
      _x = self
      buff.write(_get_struct_3if6Ii2B6d().pack(_x.data, _x.x, _x.y, _x.z, _x.x_pos, _x.y_pos, _x.z_pos, _x.x_ik_pos, _x.y_ik_pos, _x.z_ik_pos, _x.z_depth, _x.pos_flag, _x.depth_flag, _x.f64_linear_x, _x.f64_linear_y, _x.f64_linear_z, _x.f64_angular_x, _x.f64_angular_y, _x.f64_angular_z))
    except struct.error as se: self._check_types(struct.error("%s: '%s' when writing '%s'" % (type(se), str(se), str(locals().get('_x', self)))))
    except TypeError as te: self._check_types(ValueError("%s: '%s' when writing '%s'" % (type(te), str(te), str(locals().get('_x', self)))))

  def deserialize_numpy(self, str, numpy):
    """
    unpack serialized message in str into this message instance using numpy for array types
    :param str: byte array of serialized message, ``str``
    :param numpy: numpy python module
    """
    codecs.lookup_error("rosmsg").msg_type = self._type
    try:
      end = 0
      _x = self
      start = end
      end += 94
      (_x.data, _x.x, _x.y, _x.z, _x.x_pos, _x.y_pos, _x.z_pos, _x.x_ik_pos, _x.y_ik_pos, _x.z_ik_pos, _x.z_depth, _x.pos_flag, _x.depth_flag, _x.f64_linear_x, _x.f64_linear_y, _x.f64_linear_z, _x.f64_angular_x, _x.f64_angular_y, _x.f64_angular_z,) = _get_struct_3if6Ii2B6d().unpack(str[start:end])
      self.pos_flag = bool(self.pos_flag)
      self.depth_flag = bool(self.depth_flag)
      return self
    except struct.error as e:
      raise genpy.DeserializationError(e)  # most likely buffer underfill

_struct_I = genpy.struct_I
def _get_struct_I():
    global _struct_I
    return _struct_I
_struct_3if6Ii2B6d = None
def _get_struct_3if6Ii2B6d():
    global _struct_3if6Ii2B6d
    if _struct_3if6Ii2B6d is None:
        _struct_3if6Ii2B6d = struct.Struct("<3if6Ii2B6d")
    return _struct_3if6Ii2B6d
